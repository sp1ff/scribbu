# Nightly build for `scribbu'.
name: ci
on:
  # I want to be able to trigger this workflow manually at any time
  workflow_dispatch:
  push:
  # TODO(sp1ff): add pull requests, cron job

jobs:
  build:
    name: build
    strategy:
      matrix:
        # TODO(sp1ff): add more OS versions
        os: [macos-10.15, ubuntu-20.04]
        # TODO(sp1ff): add latest
        boost: [oldest,pinned]
        include:
        - os: macos-10.15
          boost: oldest
          boost-ver: 1_58_0
          boost-dl: https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.bz2
        - os: macos-10.15
          boost: pinned
          boost-ver: 1_71_0
          boost-dl: https://dl.bintray.com/boostorg/release/1.71.0/source/boost_1_71_0.tar.bz2
        - os: ubuntu-20.04
          boost: oldest
          boost-ver: 1_58_0
          boost-dl: https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.bz2
        - os: ubuntu-20.04
          boost: pinned
          boost-ver: 1_71_0
          boost-dl: https://dl.bintray.com/boostorg/release/1.71.0/source/boost_1_71_0.tar.bz2
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Install pre-requisites (MacOS)
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
        set -x
        pwd
        brew install autoconf automake libtool openssl guile doxygen flex bison graphviz texinfo
        brew install --cask basictex
    - name: Install pre-requisites (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        set -x
        pwd
        sudo apt-get install -y autoconf automake libtool openssl guile-3.0-dev doxygen flex bison graphviz libunistring-dev texlive
    - name: Cache boost (MacOS)
      if: matrix.os == 'macos-10.15'
      id: cache-boost-macos
      uses: actions/cache@v2
      with:
        path: boost_${{ matrix.boost-ver }}/installdir
        key: ${{ runner.os }}-${{ matrix.boost-ver }}
    - name: Cache boost (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' && matrix.boost != 'pinned'
      id: cache-boost-ubuntu
      uses: actions/cache@v2
      with:
        path: boost_${{ matrix.boost-ver }}/installdir
        key: ${{ runner.os }}-${{ matrix.boost-ver }}
    - name: Get boost (MacOS)
      if: matrix.os == 'macos-10.15' && steps.cache-boost-macos.outputs.cache-hit != 'true'
      run: |
        set -x
        pwd
        curl -L -o boost_${{ matrix.boost-ver }}.tar.bz2 ${{ matrix.boost-dl }}
        md5 boost_${{ matrix.boost-ver }}.tar.bz2
        cc --version
        tar xf boost_${{ matrix.boost-ver }}.tar.bz2
        mkdir boost_${{ matrix.boost-ver }}/installdir
    - name: Patch boost (MacOS)
      if: matrix.os == 'macos-10.15' && steps.cache-boost-macos.outputs.cache-hit != 'true' && matrix.boost == 'oldest'
      run: |
        cd boost_${{ matrix.boost-ver }}/tools/build/src/engine/modules
        cp path.c path.c.bak
        echo "#include \"../filesys.h\"" > path.c.tmp
        cat path.c >> path.c.tmp
        mv path.c.tmp path.c
        cat path.c
        # https://github.com/arvidn/libtorrent/issues/4662
        pwd
        cd ../../tools
        pwd
        cp darwin.jam darwin.jam.bak
        head -n138 darwin.jam > darwin.jam.tmp
        tail -n +144 darwin.jam >> darwin.jam.tmp
        mv darwin.jam.tmp darwin.jam
    - name: Build boost (MacOS)
      if: matrix.os == 'macos-10.15' && steps.cache-boost-macos.outputs.cache-hit != 'true'
      run: |
        cd boost_${{ matrix.boost-ver }}
        test -f bootstrap.sh && ./bootstrap.sh --prefix=./installdir || cat bootstrap.log
        ./b2 && ./b2 install
        cd installdir/lib
        pwd
        ls
        here=$(pwd)
        install_name_tool -change libboost_chrono.dylib     ${here}/libboost_chrono.dylib     libboost_log.dylib
        install_name_tool -change libboost_thread.dylib     ${here}/libboost_thread.dylib     libboost_log.dylib
        install_name_tool -change libboost_date_time.dylib  ${here}/libboost_date_time.dylib  libboost_log.dylib
        install_name_tool -change libboost_filesystem.dylib ${here}/libboost_filesystem.dylib libboost_log.dylib
        install_name_tool -change libboost_system.dylib     ${here}/libboost_system.dylib     libboost_log.dylib
        install_name_tool -change libboost_regex.dylib      ${here}/libboost_regex.dylib      libboost_log.dylib
        install_name_tool -change libboost_system.dylib     ${here}/libboost_system.dylib     libboost_chrono.dylib
        install_name_tool -change libboost_system.dylib     ${here}/libboost_system.dylib     libboost_thread.dylib
        set +x
    - name: Install boost (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' && matrix.boost == 'pinned'
      run: |
        pwd
        set -x
        sudo apt-get install -y libboost1.71-all-dev
    - name: Get boost (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' && matrix.boost != 'pinned' && steps.cache-boost-ubuntu.outputs.cache-hit != 'true'
      run: |
        set -x
        pwd
        curl -L -o boost_${{ matrix.boost-ver }}.tar.bz2 ${{ matrix.boost-dl }}
        md5sum boost_${{ matrix.boost-ver }}.tar.bz2
        tar xf boost_${{ matrix.boost-ver }}.tar.bz2
        cd boost_${{ matrix.boost-ver }}
        mkdir installdir
        # libboost_python fails for boost 1.58.0-- I don't need it, so didn't bother debugging it
        ./bootstrap.sh --prefix=./installdir --without-libraries=python || cat bootstrap.log
        ./b2 && ./b2 install
    - name: Configure scribbu (MacOS)
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
        set -x
        pwd
        ls
        test autogen.sh && ./autogen.sh
        test bootstrap && ./bootstrap
        PATH="/usr/local/opt/bison/bin:/usr/local/opt/texinfo/bin:$PATH" ./configure --with-boost=$(cd boost_${{ matrix.boost-ver }}/installdir; pwd) --with-openssl=/usr/local/opt/openssl CPPFLAGS="-D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR -I/usr/local/opt/openssl@1.1/include" LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
    - name: Configure scribbu (Ubuntu, pinned)
      if: matrix.os == 'ubuntu-20.04' && matrix.boost == 'pinned'
      shell: bash
      run: |
        set -x
        pwd
        ls
        test autogen.sh && ./autogen.sh
        test bootstrap && ./bootstrap
        ./configure
    - name: Configure scribbu (Ubuntu, non-pinned)
      if: matrix.os == 'ubuntu-20.04' && matrix.boost != 'pinned'
      shell: bash
      run: |
        set -x
        pwd
        ls
        test autogen.sh && ./autogen.sh
        test bootstrap && ./bootstrap
        ./configure --with-boost=$(cd boost_${{ matrix.boost-ver }}/installdir; pwd)
    - name: Make scribbu (MacOS)
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
        set -x
        pwd
        PATH="/usr/local/opt/bison/bin:/usr/local/opt/texinfo/bin:$PATH" make
    - name: Make scribbu (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        set -x
        pwd
        make
    - name: Patch boost dependencies (MacOS)
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
        set -x
        pwd
        echo "===================================="
        otool -L src/.libs/scribbu
        echo "===================================="
        otool -l src/.libs/scribbu
        echo "===================================="
        there=$(cd boost_${{ matrix.boost-ver }}/installdir; pwd)
        echo "Changing the load location for boost libs to ${there}."
        install_name_tool -change libboost_iostreams.dylib           ${there}/libboost_iostreams.dylib       src/.libs/scribbu
        install_name_tool -change libboost_filesystem.dylib          ${there}/libboost_filesystem.dylib      src/.libs/scribbu
        install_name_tool -change libboost_log.dylib                 ${there}/libboost_log.dylib             src/.libs/scribbu
        install_name_tool -change libboost_program_options.dylib     ${there}/libboost_program_options.dylib src/.libs/scribbu
        install_name_tool -change libboost_regex.dylib               ${there}/libboost_regex.dylib           src/.libs/scribbu
        install_name_tool -change libboost_system.dylib              ${there}/libboost_system.dylib          src/.libs/scribbu
        echo "===================================="
        otool -L src/.libs/scribbu
        echo "===================================="
        otool -l src/.libs/scribbu
        echo "===================================="
        cd test && make unit
        echo "===================================="
        otool -L .libs/unit
        echo "===================================="
        otool -l .libs/unit
        install_name_tool -change libboost_iostreams.dylib           ${there}/libboost_iostreams.dylib           .libs/unit
        install_name_tool -change libboost_filesystem.dylib          ${there}/libboost_filesystem.dylib          .libs/unit
        install_name_tool -change libboost_log.dylib                 ${there}/libboost_log.dylib                 .libs/unit
        install_name_tool -change libboost_program_options.dylib     ${there}/libboost_program_options.dylib     .libs/unit
        install_name_tool -change libboost_regex.dylib               ${there}/libboost_regex.dylib               .libs/unit
        install_name_tool -change libboost_system.dylib              ${there}/libboost_system.dylib              .libs/unit
        install_name_tool -change libboost_unit_test_framework.dylib ${there}/libboost_unit_test_framework.dylib .libs/unit
        echo "===================================="
        otool -L .libs/unit
        echo "===================================="
        otool -l .libs/unit
    - name: Test scribbu
      shell: bash
      run: |
        set -x
        pwd
        make check || cat test/test-suite.log
    - name: Test the Autotools distribution
      # I only make the Autotools distro on Ubuntu, so just test there
      if: matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        set -x
        pwd
        make distcheck
